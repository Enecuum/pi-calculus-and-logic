#!/usr/local/bin/sharnellPiCalculusForEnecuumSmartContracts --verify --test

# Это тестовый смарт контракт на pi исчислении расчитанный на согласованную визуализацию в виде сети петри
# Расширение enqpi это тектовый формат pi исчисления с поддержкой сетей петри линейной логики и блокчейна enecuum
# Этот формат служит сдесь технически развёрнутой версией смарт контракта напрямую написанном на pi исчислении без шаблонизатора
# Поддерживается сокращение имён каналов, namespaces, оператор опциональниых процессов и канальная дизюнкция
# Используется синтаксический сахар для быстрой передачи аргументов каналам

#   В pi исчислении уже присуствует экспоненциальный оператор Serv обозначенный восклицательным знаком,
# некомутативный асоциативный оператор конкатенации процессов, получения и передача каналов и токенов (сети петри)
# в качестве токена рассматривается канал закрытый как на приём так и на передачу (в рамках pi исчисления)
# числа биты байты хэши и байт массивы рассматриваются как сервера токенов и эффективно переводятся в машинное представление
# есть множество встроенных функций таких как хэширование и стандартный набор блокчейна

#   В стандартный набор блокчейна enecuum для этого pi исчисления (enqpi) входит
# подключение к текущей базе HDAG и функции поиска проверки и запроса данных
# запросы на проверку наличия данных на всех необходимых сторонах контракта
# оставление пометочных записей (для ведения рейтинга) в базе данных поставщиков, эта база находится в отдельной ветке

#   Это pi исчисление можно назвать в полной мере логическим,
# так как благодаря линейной логике можно удобно использовать канальные предикаты,
# проверяя теперь условия смарт контракта осуществляя логические ветвления и переборы вариантов

# Тоесть pi исчисление является низкоуровневой обвязочной базой для работы логики SHARNELL в более практичном виде
# Блокчейн теперь дружит с Пичейн. Шарнель энэкупила бы пичейн.

! смарт контракт : тестовый ( ( хэш заказа . стороны участники ) . возврат результата )
. ВыпПровХэшаЗак       <>
| ПолучПеремДляКонтр   <>
. ПосчитИПровПеремВрем <>
. ? убедиться в факте приёма товара за период и выдать канал товара <УмПериодПолТов> (полученный товар)
  . ситуация когда товар получен <>
  | ! ОтмНеп <> ;
| отменить неполучение (?) . ситуация Нет поставки <> ;

смартКонтракт:тестовый {

! выполнить проверки хэша заказа ()
. проверить что хэш существует в локальной базе <хэш заказа>
| ! стороны участники ( проверить что хэш существует на стороне участника < * . хэш заказа > ) ;

! получить перменные для контракта ()
. получить текушее блокчейн время                (блокчейн время)
| получить срок на отсрочку товара  <хэш заказа> (срок отсрочки товара)
| получить время начала заказа      <хэш заказа> (время начала заказа)
| получить cрок действия заказа     <хэш заказа> (срок действия)
| получить идентификатор поставщика <хэш заказа> (поставщик) ;

! посчитать и проверить переменные времени ()
. вычитание времени < блокчейн время . время начала заказа > ( проверить что время меньше < * . срокДействия > )
| получить период времени от и плюс < время начала заказа . срок отсрочки товара > (уместный период получения товара) ;

! ситуация Нет поставки ()
. закрыть заказ со статусом < хэшЗаказа . "Нет поставки" >
| оставить в базе поставщиков записть об факте отсутствия поставки < база поставщиков . поставщик . хэш заказа > ;

! ситуация когда товар получен ()
. получить сумму отданную за товар <хэш заказа> (отданная сумма за товар)
| убедиться что все необходимые сопроводительные документы присутствуют <полученный товар>
| получить необходимую сумму требуемую для сбыта товара <полученный товар> (требуемая сумма сбыта товара)
. ? проверить удовлетворяет ли < отданная сумма за товар . ТребСумСбытТов >
  . ! НеудСуммОтменена <> ,
  | ситуация когда сумма за товар удовлетворительная <> ;
| неудовлетворительная cумма отменена (?) . ситуация когда сумма за товар не удовлетворительная <> ;

! СитКогдСумЗаТовУдов() ;

! CитКогдСумЗаТовНеУдов() ;

} |









